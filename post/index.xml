<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Apr 2019 08:36:54 -0700</lastBuildDate>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>let,apply,run,with的区别</title>
      <link>http://localhost:1313/post/kotlin/letapplyrunwith%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 25 Apr 2019 08:36:54 -0700</pubDate>
      
      <guid>http://localhost:1313/post/kotlin/letapplyrunwith%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>let,apply,run,with的区别 let 官方源码 1 public inline fun &amp;lt;T, R&amp;gt; T.let(block: (T) -&amp;gt; R): R = block(this) 例子： 1 2 3 4 5 6 7 8 9 10 11 fun main(args: Array&amp;lt;String&amp;gt;) { val list: MutableList&amp;lt;String&amp;gt; = mutableListOf(&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;) val change: Any change = list.let { it.add(&amp;#34;D&amp;#34;)</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/android/dagger2/component%E7%9A%84%E7%BB%84%E7%BB%87%E5%85%B3%E7%B3%BB%E4%B8%8Esubcomponent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/android/dagger2/component%E7%9A%84%E7%BB%84%E7%BB%87%E5%85%B3%E7%B3%BB%E4%B8%8Esubcomponent/</guid>
      <description>Component的组织关系与SubComponent 多个Component之间有相同的依赖，那么该如何处理它们之间的关系？
前言 先看下面一个场景
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  public class Man { @Inject Car car; public void goWork() { ... car.go(); ... } } public class Friend { @Inject Car car; // 车是向 Man 借的  public void goSightseeing() { ... car.go(); ... } }   Man 有一辆车，Friend 没有车，但是他可以借 Man 的车出去游玩下，提供 Car 实例的CarModule不变，那么我们应该怎么设计 Component 呢？</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/android/dagger2/dagger2%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/android/dagger2/dagger2%E5%85%A5%E9%97%A8/</guid>
      <description>入门 要实现依赖注入，首先要声明一个依赖对象的需求，这个声明是通过@Inject注解来实现的，所以Car类的实现如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  public class Car { String mName; @Inject Engine mEngine; public Car(Engine engine){ mEngine = engine; } public String getName(){ return mName; } Engine getEngine(){ return mEngine; } }   声明了需求之后，需要声明提供方。提供方声明有两种方式：
 使用@Inject注解被依赖对象的构造方法； 使用@Provide注解Module类的普通方法。  先用第一种来实现：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  class Engine { public final int CYLINDER_FUEL_COST = 10; int mCylinderNumbers; @Inject public Engine(){ mCylinderNumbers = 1; } public Engine(int cylinderNumbers){ this.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/android/dagger2/scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/android/dagger2/scope/</guid>
      <description>Scope(作用域) Scope是用来确定注入的实例的生命周期的，如果没有使用Scope注解，Component每次调用Module中的provide方法或者Inject构造函数生成的工厂时都会创建一个新的实例，而使用Scope后可以复用之前的依赖实例。下面先介绍Scope的基本概念与原理，再分析Singleton、Reusable等作用域。
Scope基本概念 先介绍Scope的用法，@Scope是元注解，是用来标记自定义注解的，如下：
1 2 3 4  @Documented @Retention(RUNTIME) @Scope public @interface MyScope {}   MyScope就是一个Scope注解，Scope注解只能标注目标类、@provide方法和component。Scope注解要生效的话，需要同时标注在Component和提供依赖的示例的Module或者目标类上。Module中provide方法中的Scope注解必须和与之绑定的Component的Scope注解一样，否者作用域不同会导致编译时报错。例如，CarModule中的provide方法的Scope是MyScope的话，ManComponent的Scope必须是MyScope这样的作用域才会生效，而且不能是@Singleton或者其它Scope注解，不然编译时Dagger2会报错。
那么 Scope 注解又是如何产生作用的呢，怎么保证生成的依赖实例的生命周期呢？
在 Dagger 2 官方文档中我找到一句话，非常清楚地描述了@Scope的原理：
 When a binding uses a scope annotation, that means that the component object holds a reference to the bound object until the component object itself is garbage-collected.
 当 Component 与 Module、目标类（需要被注入依赖）使用 Scope 注解绑定时，意味着 Component 对象持有绑定的依赖实例的一个引用直到 Component 对象本身被回收。也就是作用域的原理，其实是让生成的依赖实例的生命周期与 Component 绑定，Scope 注解并不能保证生命周期，要想保证赖实例的生命周期，需要确保 Component 的生命周期。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/dart%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/dart%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>Dart基础语法.md 方法 Dart下??、??=属于操作符，如：AA ?? &amp;quot;999&amp;quot;表示如果AA为空，返回999；AA ??=&amp;quot;999&amp;quot; 表示如果AA为空，给AA设置为999。
Dart方法可以设置*参数默认值*和*指定名称*。比如：getDetail(String userName,reposName,{branch = &amp;quot;master&amp;quot;}{}方法，这里branch不设置的话，默认是master。参数类型可以指定或者不指定。调用效果：getRepositoryDetailDao(&amp;quot;aa&amp;quot;,&amp;quot;bb&amp;quot;,brance:&amp;quot;dev&amp;quot;);
Dart不像Java，没有关键词public、private等修饰符，_下横线直接代表private,但是有@protected注解。
Dart中多构造函数，可以通过如下代码实现。默认构建方法只能有一个，而通过Model.emptu()方法可以创建一个空参数的类，其实方法名称随你喜欢。而变量的初始化值，只需要通过this.name构造方法中指定即可：
1 2 3 4 5 6 7 8 9 10 11 12 13  class ModelA { String name; String tag; //默认构造方法，赋值给name和tag  ModelA(this.name, this.tag); //返回一个空的ModelA  ModelA.empty(); //返回一个设置了name的ModelA  ModelA.forName(this.name); }   asyc/await Flutter 中支持 async/await。这一点和 ES7 很像，如下代码所示，只是定义的位置不同。同时异步操作也和 ES6 中的Promise 很像，只是 Flutter 中返回的是 Future 对象，通过 then 可以执行下一步。如果返回的还是 Future 便可以 then().then.() 的流式操作了 。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  ///模拟等待两秒，返回OK  request() async { await Future.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/flutter%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/flutter%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>Flutter实战进阶 container width、height 100% 1 2 3 4 5  FractionallySizedBox( widthFactor: 1, heightFactor: 1, child: , )  1 2  double width = MediaQuery.of(context).size.width double height = MediaQuery.of(context).size.height   沉浸式背景图片 背景图片铺满AppBar及状态栏
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  Widget build(BuildContext context) { return new Stack( children: &amp;lt;Widget&amp;gt;[ Container( child: Image.network(&amp;#39;https://www.bing.com/az/hprichbg/rb/Punakaiki_DE-DE0884339574_1920x1080.jpg&amp;#39;), color: Colors.lightGreen, ), Scaffold( backgroundColor: Colors.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/-paddingaligncenter%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/-paddingaligncenter%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/expanded%E5%92%8Cflexible%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/expanded%E5%92%8Cflexible%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>Expanded 和 Flexible Flexible Flexible是一个控制Row、Column、Flex等子组件如何布局的组件。
Flexible组件可以使Row、Column、Flex等子组件在主轴方向有填充可用空间能力，但是它与Expanded组件不同，它不强制子组件填充可用空间。
Expanded Row、Column、Flex会被Expanded撑开，充满主轴可用空间。
使用方式：
1 2 3 4 5 6 7 8 9 10  Row( children: &amp;lt;Widget&amp;gt;[ Container( /// 此组件在主轴方向占据48.0逻辑像素  width: 48.0 ), Expanded( child: Container() /// 此组件会填满Row在主轴方向的剩余空间，撑开Row  ) ] )   如果多个子组件展开，可用空间会被flex factor（表示扩展速度、比例）分割。
Expanded组件必须用在Row、Column、Flex内，并且从Expanded到封装它的Row、Column、Flex的路径必须只包括StatelessWidgets或StatefulWidgets组件(不能是其他类型的组件，像RenderObjectWidget，它是渲染对象，不再改变尺寸了，因此Expanded不能放进RenderObjectWidget)。
Expanded的用法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  import &amp;#39;package:flutter/material.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/flutter%E5%B8%83%E5%B1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/flutter%E5%B8%83%E5%B1%80/</guid>
      <description>Flutter布局 Flutter 中拥有需要将近30种内置的 布局Widget，其中常用有 Container、Padding、Center、Flex、Stack、Row、Column、ListView 等，下面简单讲解它们的特性和使用。
概述 标准组件-Standard widgets Container 给一个组件添加padding,margins,边界（borders）,背景颜色或其它装饰（decorations)。
GridView 将多个widget放在一个可滑动的表格中
ListView 将多个widget放在一个可滑动列表中
Stack 在一个widget上面覆盖另外一个widget
Material Components 只有Material App能够使用Material Components的组件。
Card 将一些相近的信息封装进一个有圆角的阴影的盒子里。
ListTile 一个Row中装载最多3行文字，可选则在前面或者尾部添加图标。
Container 最常用的默认布局，只能包含一个child,支持配置padding,margin,color,width,height,decoration(一般配置边框和阴影)等配置，在Flutter中，不是所有的控件都有宽高、padding、margin、color等属性，所以才会有Padding,Center等Widget的存在。
1 2 3 4 5 6 7 8 9 10 11 12 13 14  Container( //四周10大小的margin  margin: EdgeInsets.all(10.0), height: 120.0, width: 500.0, //透明黑色遮罩  decoration: BoxDecoration( borderRadius: BorderRadius.all(Radius.circular(4.0)), color: Colors.black, border: Border.all(color: Colors.blue,width: 0.3) ), child: Text(&amp;#34;6666&amp;#34;, style: TextStyle(color: Colors.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/flutter%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/flutter%E9%A1%B5%E9%9D%A2/</guid>
      <description> Flutter页面 Flutter 中除了布局的 Widget，还有交互显示的 Widget 和完整页面呈现的Widget。其中常见的有 MaterialApp、Scaffold、Appbar、Text、Image、FlatButton等。下面简单介绍这些 Wdiget，并完成一个页面。
   类型 作用特点     MaterialApp 一般作为APP顶层的主页入口，可配置主题，多语言，路由等   Scaffold 一般用户页面的承载Widget，包含appbar、snackbar、drawer等material design的设定。   Appbar 一般用于Scaffold的appbar ，内有标题，二级页面返回按键等，当然不止这些，tabbar等也会需要它 。   Text 显示文本，几乎都会用到，主要是通过style设置TextStyle来设置字体样式等。   RichText 富文本，通过设置TextSpan，可以拼接出富文本场景。   TextField 文本输入框 ：new TextField(controller: //文本控制器, obscureText: &#34;hint文本&#34;);   Image 图片加载: new FadeInImage.assetNetwork( placeholder: &#34;预览图&#34;, fit: BoxFit.fitWidth, image: &#34;url&#34;);   FlatButton 按键点击: new FlatButton(onPressed: () {},child: new Container());    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/futurebuilder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/futurebuilder/</guid>
      <description>FutureBuilder  Widget that builds itself based on the snapshot of interaction with a Future.
 官方的意思是一个基于与Future交互快照构建自身的小组件。
FutureBuilder用法和实现 构造方法：
1 2 3 4 5 6 7  const FutureBuilder({ Key key, this.future, //获取数据的方法  this.initialData, //初始的默认数据  @required this.builder }) : assert(builder != null), super(key: key);   主要看builder，这个是我们主要关心的，它是我们构建组件的策略。 接收两个参数：BuildContext context，AsyncSnapshot snapshot。 context就不用解释了，snapshot就是_calculation在时间轴上执行过程的状态快照。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  //FutureBuilder控件 new FutureBuilder&amp;lt;String&amp;gt;( future: _calculation, // 用户定义的需要异步执行的代码，类型为Future&amp;lt;String&amp;gt;或者null的变量或函数  builder: (BuildContext context, AsyncSnapshot&amp;lt;String&amp;gt; snapshot) { //snapshot就是_calculation在时间轴上执行过程的状态快照  switch (snapshot.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/image/</guid>
      <description>https://blog.csdn.net/poorkick/article/details/80458707</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/listtile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/listtile/</guid>
      <description>ListTile 一个固定高度的行，通常包含一些文本，以及一个行前或行尾图标。
构造方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14  const ListTile({ Key key, this.leading, this.title, this.subtitle, this.trailing, this.isThreeLine = false, this.dense, this.contentPadding, this.enabled = true, this.onTap, this.onLongPress, this.selected = false, })   leading 最左侧的头部，参数是一个widget,(这里以icon为例)
1  new ListTile(leading: new Icon(Icons.cake),)   title 控件的title(参数是widget,这里text为例)
1 2 3 4  ListTile( leading: new Icon(Icons.cake), title: new Text(&amp;#39;标题&amp;#39;), )   subtitle 富文本标题</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/sliverappbar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/sliverappbar/</guid>
      <description>SliverAppBar AppBar和SliverAppBar是Material Design 中的App Bar，也就是Android中的Toolbal，关于Toolbar的设计指南请参考Material Design中Toolbar的内容。
AppBar和SliverAppBar都是继承StatefulWidget类，都代表Toolbar,二者的区别在于AppBar位置的固定在应用最上面，而SliverAppBar是可以跟随内容滚动的。
SliverAppBar的构造方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  /// Creates a material design app bar that can be placed in a [CustomScrollView]. ///  /// The arguments [forceElevated], [primary], [floating], [pinned], [snap]  /// and [automaticallyImplyLeading] must not be null. const SliverAppBar({ Key key, this.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/statefulwiget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/statefulwiget/</guid>
      <description>StatefulWiget 你需要创建管理的是主要是 State ， 通过 State 的 build 方法去构建控件。在 State 中，你可以动态改变数据，这类似 MVVM 实现，在 setState 之后，改变的数据会触发 Widget 重新构建刷新。而下方代码中，是通过延两秒之后，让文本显示为 &amp;ldquo;这就变了数值&amp;ldquo;。
State 中主要的声明周期有 ：
 initState ：初始化，理论上只有初始化一次，第二篇中会说特殊情况下。 didChangeDependencies：在 initState 之后调用，此时可以获取其他 State 。 dispose ：销毁，只会调用一次。  示例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  import &amp;#39;dart:async&amp;#39;; import &amp;#39;package:flutter/material.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/widget/%E4%B8%8D%E9%80%8F%E6%98%8E%E6%8E%A7%E4%BB%B6-opacity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/widget/%E4%B8%8D%E9%80%8F%E6%98%8E%E6%8E%A7%E4%BB%B6-opacity/</guid>
      <description> 不透明控件Opacity Opacity控件调整子控件的不透明度，使子控件透明度，不透明度从0.0到1.0之间，0.0表示完全透明，1.0表示完全不透明。
用法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  import &amp;#39;package:flutter/material.dart&amp;#39;; class OpactiyDemo extends StatelessWidget{ @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text(&amp;#34;透明度控件&amp;#34;), ), body: new Center( child: new Opacity( opacity: 0.1, child: new Container( height: 100.0, width: 250.0, color: Colors.red, ), ), ) ); } } void main(){ runApp(new MaterialApp( title: &amp;#34;透明度控件&amp;#34;, home: new OpactiyDemo(), )); }  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/%E4%B8%BB%E9%A2%98-theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/%E4%B8%BB%E9%A2%98-theme/</guid>
      <description>主题-Theme Theme Widget 可以为Material APP 定义主题数据（ThemeData），Material组件库里很多Widget都使用了主题数据，如导航栏颜色，标题字体，Icon样式等。Theme内会使用inherited Widget来为其子树Widget共享样式数据。
ThemeData ThemeData是Material Design Widget库的主题数据，Material库的Widget需要遵守相应的设计规范，而这些规范可自定义部分都定义在ThemeData，所以我们可以通过ThemeData来自定义应用主题。通过Theme.of方法获取当前ThemeData。 &amp;gt; 注意，Material Design 设计规范中有些是不能自定义的，如导航栏高度，ThemeData只包含了可自定义部分。
ThemeData中的部分数据：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  ThemeData({ Brightness brightness, //深色还是浅色  MaterialColor primarySwatch, //主题颜色样本，见下面介绍  Color primaryColor, //主色，决定导航栏颜色  Color accentColor, //次级色，决定大多数Widget的颜色，如进度条、开关等。  Color cardColor, //卡片颜色  Color dividerColor, //分割线颜色  ButtonThemeData buttonTheme, //按钮主题  Color cursorColor, //输入框光标颜色  Color dialogBackgroundColor,//对话框背景颜色  String fontFamily, //文字字体  TextTheme textTheme,// 字体主题，包括标题、body等文字样式  IconThemeData iconTheme, // Icon的默认样式  TargetPlatform platform, //指定平台，应用特定平台控件风格  .</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget/listview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget/listview/</guid>
      <description>ListView ListView是最常用的可滚动Widget，它可以沿着一个方向限行排布所有子Widget。 构造函数如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  ListView({ ... //可滚动widget公共参数  Axis scrollDirection = Axis.vertical, bool reverse = false, ScrollController controller, bool primary, ScrollPhysics physics, EdgeInsetsGeometry padding, //ListView各个构造函数的共同参数  double itemExtent, bool shrinkWrap = false, bool addAutomaticKeepAlives = true, bool addRepaintBoundaries = true, double cacheExtent, //子widget列表  List&amp;lt;Widget&amp;gt; children = const &amp;lt;Widget&amp;gt;[], })   上面参数分为两组，第一组是可滚动Widget公共参数，第二组是ListView各个构造函数（ListView有多个构造函数）的公共参数。 可滚动Widget公共参数介绍见滚动监听及控制ScrollController</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget%E7%AE%80%E4%BB%8B/</guid>
      <description> 可滚动Widget简介 当内容超过显示视口（ViewPort）时，如果没有特殊处理，Flutter则会提示Overflow错误。为此，Flutter提供了可滚动Widget用于显示列表和长布局。 下面是Srollable widget的公共属性，为了避免重复介绍，这里做统一介绍。
1 2 3 4 5 6 7  Scrollable({ ... this.axisDirection = AxisDirection.down, this.controller, this.physics, @required this.viewportBuilder, //后面介绍 })    axisDirection: 滚动方向。 physics: 此属性接受一个ScrollPhysics对象，它决定可滚动Widget如何响应用户操作，比如用户滑动完抬起手指后，继续执行动画；或者滑动到边界时，如何显示。默认情况下，Flutter会根据平台使用不同的ScrollPhysics对象，应用不同的显示效果，如当滑动到边界时，继续拖动的话，在IOS上会出现弹性效果，而在Android上回出现微光效果。乳沟你想在所有平台上使用同一的效果，可以显示指定，Flutter SDK中包含了两个ScrollPhysics的子类可以直接使用：  ClampingScrollPhysics: Android下微光效果。 BouncingScrollPhysics: IOS下弹性效果。  controller: 此属性接收一个ScrollController对象。ScrollController主要作用是控制滚动位置和监听滚动事件。默认情况下，widget树种会有一个默认的PromaryScrollController, 如果子树中的可滚动widget没有显示的执行controller并且primary属性为true时（默认就为true），可滚动widget会使用这个默认的PrimarySrollController，这种机制的好处是父widget可以控制子树中可滚动widget的滚动，例如，Scaffold使用这种机制在IOS中实现了“回到顶部”的手势。详细介绍见滚动监听及控制ScrollController  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget/%E6%BB%9A%E5%8A%A8%E7%9B%91%E5%90%AC%E5%8F%8A%E6%8E%A7%E5%88%B6scrollcontroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/%E5%8F%AF%E6%BB%9A%E5%8A%A8widget/%E6%BB%9A%E5%8A%A8%E7%9B%91%E5%90%AC%E5%8F%8A%E6%8E%A7%E5%88%B6scrollcontroller/</guid>
      <description>滚动监听及控制 以ListView为例，展示ScrollController的具体用法。最后，再介绍一下路由切换时如何保存滚动位置。
ScrollController 构造函数：
1 2 3 4 5  ScrollController({ double initialScrollOffset = 0.0, //初始滚动位置  this.keepScrollOffset = true,//是否保存滚动位置  ... })   ScrollController常用属性和方法：
 offset 可滚动Widget当前滚动的位置 jumpTo(double offset)、animaTo(double offset,...) 这两个方法用于跳转到指定位置，他们不同之处在于，后者在跳转时会执行一个动画，前者不会。   滚动监听 ScrollController间接继承自Listenable，我们可以根据ScrollController来监听滚动事件。如：
1  controller.addListener(()=&amp;gt; print(controller.offset))   示例 我们创建一个ListView，当滚动位置放生变化时，我们先打印当前滚动位置，然后判断当前位置是否超过1000像素，如果草果则在屏幕右下角显示一个“返回顶部”的按钮，该按钮点击后可以使ListView恢复到初始位置；如果没有超过1000像素，则隐藏“返回顶部按钮”。代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  class ScrollControllerTestRoute extends StatefulWidget { @override ScrollControllerTestRouteState createState() { return new ScrollControllerTestRouteState(); } } class ScrollControllerTestRouteState extends State&amp;lt;ScrollControllerTestRoute&amp;gt; { ScrollController _controller = new ScrollController(); bool showToTopBtn = false; //是否显示“返回到顶部”按钮  @override void initState() { //监听滚动事件，打印滚动位置  _controller.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/flutter/%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/flutter/%E8%B7%AF%E7%94%B1/</guid>
      <description>路由管理 路由(Route)在移动开发中通常指页面（Page），这跟web开发中单页应用的Route概念意义是相同的，Route在Android中通常指一个Activity，在iOS中指一个ViewController。所谓路由管理，就是管理页面之间如何跳转，通常也可被称为导航管理。这和原生开发类似，无论是Android还是iOS，导航管理都会维护一个路由栈，路由入栈(push)操作对应打开一个新页面，路由出栈(pop)操作对应页面关闭操作，而路由管理主要是指如何来管理路由栈。
MaterialPageRoute MaterialPageRoute继承自PageRoute类，PageRoute类是一个抽象类，表示占有整个屏幕空间的一个模态路由页面，它还定义了路由构建及切换时过渡动画的相关接口及属性。MaterialPageRoute 是Material组件库的一个Widget，它可以针对不同平台，实现与平台页面切换动画风格一致的路由切换动画：
 对于Android，当打开新页面时，新的页面会从屏幕底部滑动到屏幕顶部；当关闭页面时，当前页面会从屏幕顶部滑动到屏幕底部后消失，同时上一个页面会显示到屏幕上。 对于iOS，当打开页面时，新的页面会从屏幕右侧边缘一致滑动到屏幕左边，直到新页面全部显示到屏幕上，而上一个页面则会从当前屏幕滑动到屏幕左侧而消失；当关闭页面时，正好相反，当前页面会从屏幕右侧滑出，同时上一个页面会从屏幕左侧滑入。  下面我们介绍一下MaterialPageRoute 构造函数的各个参数的意义：
1 2 3 4 5 6  MaterialPageRoute({ WidgetBuilder builder, RouteSettings settings, bool maintainState = true, bool fullscreenDialog = false, })    builder是一个WidgetBuilder类型的回调函数，它的作用是构建路由页面的具体内容，返回值是一个widget。我们通常要实现此回调，返回新路由的实例。 settings包含路由的配置信息，如路由名称、是否初始化路由（首页） maintainState:默认情况下，当入栈一个新路由时，原来的路由仍占会保存在内存找那个，如果想在路由没用的时候释放其所占用的所有资源，可以设置maintainState为false。 fullscreenDialog表示新的路由页面是否是一个全屏的模态对话框，在IOS中，如果fullscreenDialog为true，新页面将会从底部划入（而非水平方向）。   如果想自定义切换动画，可以自己继承PageRoute来实现。
 Navigator Navigator是一个路由管理的widget，它通过一个栈来管理一个路由widget集合。通常当前屏幕显示的页面就是栈顶的路由。Navigator提供了一系列方法来管理路由栈，在此我们只介绍其最常用的两个方法： Future push(BuildContext context, Route route) 将指定的路由入栈（即打开新的页面），返回值是一个Future对象，用以接收新路由出栈（即关闭）时的返回数据。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/hashmap/</guid>
      <description>Java7 HashMap HashMap 结构 这个仅仅是示意图，因为没有考虑到数组要扩容的情况。
大致方向上，HashMap里面是一个数组，然后数组中每个元素都是一个单向链表。
上图中，每个绿色的实体是嵌套类Entry的实例，Entry包含四个属性：key，value，hash和用于单向链表的next。
capacity：当前数组容量，始终保持2^n，可以扩容，扩容后数组大小为当前的两倍。 loadFactory：负载因子，默认为0.75 threshold：扩容的阈值，等于capacity*loadFactor
put过程分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  public V put(K key, V value) { // 当插入第一个元素的时候，需要先初始化数组大小  if (table == EMPTY_TABLE) { inflateTable(threshold); } // 如果 key 为 null，感兴趣的可以往里看，最终会将这个 entry 放到 table[0] 中  if (key == null) return putForNullKey(value); // 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/concurrenthashmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/concurrenthashmap/</guid>
      <description>Java7 ConcurrentHashMap ConcurrentHashMap和HashMap思路差不多的，但是因为它是支持并发操作，所以要复杂些。
整个ConcurrentHashMap由一个Segment组成，Segment代表“部分”或“一段”的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方使用“槽”来代表一个Segment。
简单的理解就是，ConcurrentHashMap是一个Segment数组，Segment它能够给继承ReegtrantLock来进行加锁，所以每次需要加锁的操作锁住的是一个Segment，这样只要保证每个Segment是线程安全的，也就实现了全局的线程安全。
concrrencyLevel：并行级别、并发数、Segment数，怎么翻译不重要，理解它。默认是16，也就是说ConcurrentHashMap有16个Segment，所以理论上，这个时候，最多可以同时持有16个线程并发，只要它们分别分布在不同的Segment上。这个值可以在初始化的时候设置为其他值，但是一旦初始化后，它是不可以扩容的。
再具体到每个Segment内部，其实每个Segment很像之前介绍的HashMap，不过它要保证线程安全吗，所以处理起来要麻烦些。
初始化 inittalCapacity：初始化容量，这个值是整个ConcurrentHashMap的初始容量，实际操作的时候需要平均分配给每个Segment。 loadFactor:负载因子，之前我们说了，Segment数组不可以扩容，所以这个负载因子是给每个Segment内部使用的。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) { if (!(loadFactor &amp;gt; 0) || initialCapacity &amp;lt; 0 || concurrencyLevel &amp;lt;= 0) throw new IllegalArgumentException(); if (concurrencyLevel &amp;gt; MAX_SEGMENTS) concurrencyLevel = MAX_SEGMENTS; // Find power-of-two sizes best matching arguments  int sshift = 0; int ssize = 1; // 计算并行级别 ssize，因为要保持并行级别是 2 的 n 次方  while (ssize &amp;lt; concurrencyLevel) { ++sshift; ssize &amp;lt;&amp;lt;= 1; } // 我们这里先不要那么烧脑，用默认值，concurrencyLevel 为 16，sshift 为 4  // 那么计算出 segmentShift 为 28，segmentMask 为 15，后面会用到这两个值  this.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</guid>
      <description>二叉查找树（Binary Search Tree） 二叉查找树（BST）的特性  左子树上面所有节点的值均小于或等于它的根节点的值 右子树上所有节点的值均大于或等于它的根节点的值。 左右子树分别为二叉排序树  下图中这棵树，就是一颗典型的二叉查找树： 那这样的结构有什么好处呢？我们试着查找一下值为10的节点。
 查看根节点为9： 由于10&amp;gt;9，因此查看右子节点13 由于10&amp;lt;13，因此查看左子节点11 由于10&amp;lt;11，因此查看左子节点，发现10正是要查找的节点。  二叉查找树，查找所需的最大次数等同于二叉查找树的高度。 在插入节点时，也是利用类似的方法，通过一层层比较大小，找到新节点适合的插入位置。
缺点： 缺点提现在插入新节点的时候。 例子： 假设初始的二叉查找树只有三个节点，根节点为9，左子节点值为8，右子节点为12，如图 接下来我们一次插入如下五个节点：7，6，5，4，3。依照二叉查找树的特性，结果会变成什么样呢？ 为了解决二叉查找树多次插入新节点而导致的不平衡，红黑树应用而生。
红黑树是一种自平衡的二叉查找树。除了符合二叉查找树的基本特性外，还有下列附加特性。
 节点是红色或黑色。 根节点是黑色。 每个叶子节点都是黑色的空节点（NIL节点）。 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点) 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点（简称黑高）。  正因为这些规则，才保证了红黑树的自平衡。 红黑树从根到叶子的最长路径不会超过最短路径的2倍 当插入或删除节点的时候，红黑树的规则有可能被打破。这个时候需要做一些调整，来维持我们的规则。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/java/-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <description>R-B Tree 简介 R-B Tree，全称 Red-Black Tree，又称“红黑树”，它是一种特殊的二叉查找树。红黑树的每个节点上都有储存位表示节点的颜色，可以是Red或Black。
红黑树的特性：  节点是红色或黑色。 根节点是黑色。 每个叶子节点都是黑色的空节点（NIL节点）。 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点) 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点（简称黑高）。  红黑树的应用 红黑苏的应用比较广泛，主要是用它来储存有序数据，它的事件复杂度是O(logn)，效率非常高。 例如，Java集合中TreeSet和TreeMap都是通过红黑树去实现的。
红黑树的时间复杂度和相关证明 红黑树的时间复杂度为：O(logn)
红黑树的操作 旋转操作 旋转操作分为左旋和右旋，左旋是将某个节点旋转为其右孩子的左孩子，而右旋是节点旋转为其左孩子的右孩子。
上图保安了左旋和右旋的示意图，这里以右旋为例进行说明，右旋节点M的步骤如下：
 将节点M的左孩子引用执行E节点的右孩子 将节点E的有孩子引用指向节点M，完成旋转  插入 红黑树的插入过程和二叉查找树的过程基本相似，不同的地方在于，红黑树插入新节点后，需要进行调整，以满足红黑树的性质。 性质1规定红黑树节点的颜色要么是红色要么是黑色，那么插入新节点时，这个节点应该是红色还是黑色呢？答案是红色，原因不难理解。如果插入的节点时黑色，那么这个节点所在的路径比其他路径多出一个黑色节点，这个调整起来会比较麻烦（参考红黑树的删除操作，就知道为啥多一个或少一个黑色节点时，调整起来这么麻烦了）。如果插入的节点时红色，此时所有路径上的黑色节点数量不变，仅可能会可先两个连续的红色节点的情况。这种情况下，通过变色和旋转进行调整即可，比之前简单多了。
接下来，将分析插入红色节点后红黑树的情况，这里假设要插入的节点为N，N的父节点为P，祖父节点为G，叔叔节点为U，插入红色节点后，会出现5种情况，分别如下：
情况一 插入的新节点N为红黑树的根节点，这种情况下，我们把节点N的颜色由红色变为黑色，性质2（根是黑色）被满足。同时N被染成黑色后，红黑树所有路径上的黑色节点数量增加一个，性子5（黑高）仍然满足。 情况二 N的父节点是黑色，这种情况下，性质4（每个节点必须有两个黑色子节点）和性质5没有收到影响，不需要调整。 情况三 N的父节点是红色（节点P为红色，其父节点必然为黑色），叔叔节点U也是红色。由于P和N均为红色，所以性质4被打破，此时需要进行调整。这种情况下，先将P和U的变为黑色。此时经过G的路径上的黑色节点数量不变，性质5仍然满足。但是需要注意的是G被染成红色后，可能会导致它的父节点形成连续的红色节点，此时需要递归向上调整。 情况四 N的父节点为红色，叔叔节点为黑色。节点N时P的右孩子，且节点P是G的左孩子。此时先对节点P进行左旋，调整N与P的位置。接下来按照情况五进行产后处理，以恢复性质4。 这里需要特别说明一下，上图中的节点 N 并非是新插入的节点。当 P 为红色时，P 有两个孩子节点，且孩子节点均为黑色，这样从 G 出发到各叶子节点路径上的黑色节点数量才能保持一致。既然 P 已经有两个孩子了，所以 N 不是新插入的节点。情况四是由以 N 为根节点的子树中插入了新节点，经过调整后，导致 N 被变为红色，进而导致了情况四的出现。考虑下面这种情况（PR 节点就是上图的 N 节点）： 如上图，插入节点 N 并按情况三处理。此时 PR 被染成了红色，与 P 节点形成了连续的红色节点，这个时候就需按情况四再次进行调整。
情况五 N 的父节点为红色，叔叔节点为黑色。N 是 P 的左孩子，且节点 P 是 G 的左孩子。此时对 G 进行右旋，调整 P 和 G 的位置，并互换颜色。经过这样的调整后，性质4被恢复，同时也未破坏性质5。 插入总结 上面五种情况中，情况一和情况二比较简单，情况三、四、五稍复杂。但如果细心观察，会发现这三种情况的区别在于叔叔节点的颜色，如果叔叔节点为红色，直接变色即可。如果叔叔节点为黑色，则需要选选择，再交换颜色。当把这三种情况的图画在一起就区别就比较容易观察了，如下图： 删除 相较于插入操作，红黑树的删除操作则要更为复杂一些。删除操作首先要确定待删除节点有几个孩子，如果有两个孩子，不能直接删除该节点。而是要先找到该节点的前驱（该节点左子树中最大的节点）或者后继（该节点右子树中最小的节点），然后将前驱或者后继的值复制到要删除的节点中，最后再将前驱或后继删除。由于前驱和后继至多只有一个孩子节点，这样我们就把原来要删除的节点有两个孩子的问题转化为只有一个孩子节点的问题，问题被简化了一些。我们并不关心最终被删除的节点是否是我们开始想要删除的那个节点，只要节点里的值最终被删除就行了，至于树结构如何变化，这个并不重要。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/mybatis/_parameter%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/mybatis/_parameter%E4%BD%BF%E7%94%A8/</guid>
      <description>mybatis默认有两个内置参数： * _parameter:代表整个参数 * 单个参数：_parameter就是这个参数 * 多个参数：参数会被封装成一个map,_parameter就是这个map * _databaseId:如果配置了databaseIdProvider标签，_databaseId就是代表当前数据库的别名
简单数据类型 此时#{id,jdbcType=INTEGER}中id可以取任意名字如#{a,jdbcType=INTEGER}，如果需要if test则一定使用&amp;lt;if test = &amp;ldquo;_parameter !=null&amp;rdquo;&amp;gt;，此处一定使用_parameter!=null而不是id!=null
1 2 3 4 5 6 7 8  &amp;lt;select id=&amp;#34;selectByPrimaryKey&amp;#34; resultMap=&amp;#34;BaseResultMap&amp;#34; parameterType=&amp;#34;Java.lang.Integer&amp;#34; &amp;gt; select &amp;lt;include refid=&amp;#34;Base_Column_List&amp;#34; /&amp;gt; from base.tb_user &amp;lt;if test=&amp;#34;_parameter != null&amp;#34;&amp;gt; where id = #{id,jdbcType=INTEGER} &amp;lt;/if&amp;gt; &amp;lt;/select&amp;gt;   一个对象数据类型 此时#{name,jdbcType=CHAR},#{sex,jdbcType=CHAR}中的name和sex一定要使用user对象的属性名 测试user对象&amp;lt;if test=&amp;rdquo;_parameter != null&amp;rdquo;&amp;gt;, 测试user对象属性&amp;lt;if test=&amp;ldquo;name != null&amp;rdquo;&amp;gt; 或者&amp;lt;if test=&amp;ldquo;#{name} != null&amp;rdquo;&amp;gt;
两个对象数据类型 List&amp;lt;User&amp;gt; select(User user,Page page), 此时if test一定要&amp;lt;if test=&amp;rsquo;_parameter.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/mybatis/foreach/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/mybatis/foreach/</guid>
      <description>foreach 原文 foreach一共有三种类型，分别为List,array,Map三种
foreach 属性 属性 描述 item 循环体中的具体对象。支持属性的点路径访问，如item.age,item.info.details。
具体说明：在list和数组中是其中的对象，在map中是value。
该参数为必选。 collection 要做foreach的对象，作为入参时，List&amp;lt;?&amp;gt;对象默认用list代替作为键，数组对象有array代替作为键，Map对象没有默认的键。
当然在作为入参时可以使用@Param(&#34;keyName&#34;)来设置键，设置keyName后，list,array将会失效。 除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：
如果User有属性List ids。入参是User对象，那么这个collection = &#34;ids&#34;
如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = &#34;ids.id&#34;
上面只是举例，具体collection等于什么，就看你想对那个元素做循环。
该参数为必选。 separator 元素之间的分隔符，例如在in()的时候，separator=&#34;,&#34;会自动在元素中间用“,“隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。 open foreach代码的开始符号，一般是(和close=&#34;)&#34;合用。常用在in(),values()时。该参数可选。 close foreach代码的关闭符号，一般是)和open=&#34;(&#34;合用。常用在in(),values()时。该参数可选。 index 在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选。  List测试  Array大同小异
 SQL
1 2 3 4 5 6 7 8 9 10 11 12 13  drop table users if exists; create table users ( id int, name varchar(20) ); insert into users (id, name) values(1, &amp;#39;User1&amp;#39;); insert into users (id, name) values(2, &amp;#39;User2&amp;#39;); insert into users (id, name) values(3, &amp;#39;User3&amp;#39;); insert into users (id, name) values(4, &amp;#39;User4&amp;#39;); insert into users (id, name) values(5, &amp;#39;User5&amp;#39;); insert into users (id, name) values(6, &amp;#39;User6&amp;#39;);   User类 mapper.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/mybatis/mybatis-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/mybatis/mybatis-generator/</guid>
      <description>mybatis-generator 简介 mybatis-geneator是一款mybatis自动代码生成工具，可以通过配置，快速生成mapper和xml文件。
配置 在项目的pom文件中添加插件配置
1 2 3 4 5 6 7 8 9  &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-generator-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;verbose&amp;gt;true&amp;lt;/verbose&amp;gt; &amp;lt;overwrite&amp;gt;true&amp;lt;/overwrite&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt;   在main的resource目录下创建generatorConfig.xml文件。 配置文件中内容如下，可以根据需要自行修改
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73  &amp;lt;?</description>
    </item>
    
  </channel>
</rss>